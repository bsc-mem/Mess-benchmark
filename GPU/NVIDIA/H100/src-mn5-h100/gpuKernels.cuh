/*
 * Copyright (c) 2024, Barcelona Supercomputing Center
 * Contact: mess    [at] bsc [dot] es
 *          pouya.esmaili    [at] bsc [dot] es
 *          petar.radojkovic [at] bsc [dot] es
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 *     * Neither the name of the copyright holder nor the names
 *       of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef GPU_KERNELS_CUH
#define GPU_KERNELS_CUH

#include "common.h"

void (*STREAM_copy_rw)(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) = NULL;

__device__ volatile bool endFlag = 0;

__global__ void helloWorld() {
    
}

__global__ void pointerChase(struct line* d_ptrChaceArray, uint64_t array_bytes, uint64_t number_of_instructions) {

    uint64_t i;
    struct line *start; // x1 is fixed as the beginning of the array, what changes is the offset inside the array, given by x2
    struct line *next; // rax is the next element to be read inside the array
    struct line *tmp=NULL;

    start = d_ptrChaceArray;
    next = d_ptrChaceArray[0].next;

    i=number_of_instructions/PTR_CHASE_LOOP_SIZE; // number of iterations

    asm volatile (
        ".reg .pred p, q, r;\n\t"
        "start_loop:\n\t"
        #include "loopGPU.h"
        "sub.u64 %0, %0, 1;\n\t"
        "setp.ne.u64 p|q, %0, 0;\n\t"
        "@p bra.uni start_loop;\n\t" // Conditional branch to start_loop if %0 is not zero
        : "+l"(i), "+l"(start), "+l"(next), "+l"(tmp)
        :
        : "memory"
    );

    endFlag = 1;

    d_ptrChaceArray[0].next = next;
}

__global__ void pointerChaseOverhead(struct line* d_ptrChaceArray, uint64_t array_bytes, uint64_t number_of_instructions) {
    
    uint64_t i;
    struct line *start; // x1 is fixed as the beginning of the array, what changes is the offset inside the array, given by x2
    struct line *next; // rax is the next element to be read inside the array
    struct line *tmp=NULL;

    start = d_ptrChaceArray;
    next = d_ptrChaceArray[0].next;


    i=number_of_instructions/PTR_CHASE_LOOP_SIZE; // number of iterations

    asm volatile (
        ".reg .pred p, q, r;\n\t"
        "start_loop:\n\t"
        #include "loopGPUOverhead.h"
        "sub.u64 %0, %0, 1;\n\t"
        "setp.ne.u64 p|q, %0, 0;\n\t"
        "@p bra.uni start_loop;\n\t" // predicated branch to start_loop if %0 is not zero
        : "+l"(i), "+l"(start), "+l"(next), "+l"(tmp)
        :
        : "memory"
    );

    endFlag = 1;

    d_ptrChaceArray[0].next = next;
    
}



__global__ void STREAM_copy_100(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }


    
}

__global__ void STREAM_copy_98(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_96(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}

__global__ void STREAM_copy_94(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_92(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_90(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}

__global__ void STREAM_copy_88(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_86(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_84(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_82(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_80(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}

__global__ void STREAM_copy_78(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}

__global__ void STREAM_copy_76(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_74(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_72(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_70(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_68(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_66(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_64(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_62(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_60(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_58(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_56(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_54(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_52(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_50(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_48(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_46(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_44(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_42(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_40(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_38(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_36(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_34(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_32(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_30(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_28(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_26(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_24(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_22(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_20(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_18(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_16(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_14(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_12(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_10(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_8(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_6(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_4(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


__global__ void STREAM_copy_2(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "ld.global.u64 r, [%0];\n\t"
            "add.u64 %0, %0, %2;\n\t"
            "add.u64 %3, %3, r;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}

__global__ void STREAM_copy_0(double *d_stream_a, double *d_stream_b, uint64_t workloadGeneratorArraySizeByte, uint64_t pause) {
    
    volatile __shared__ bool endFlagShared;
    endFlagShared = 0;

    uint64_t thread_id = blockIdx.x * blockDim.x + threadIdx.x;
    // uint64_t threadIdxx = threadIdx.x;
    // uint64_t cacheLineSize = CACHE_LINE;

    // number of element/byte for each thread
    uint64_t strideElement = (workloadGeneratorArraySizeByte/(blockDim.x * gridDim.x))/sizeof(double);
    uint64_t strideByte = strideElement*sizeof(double);

    double *aConst = d_stream_a + 4*thread_id; //= d_stream_a + thread_id * strideElement;
    double *bConst = d_stream_b + 4*thread_id; // = d_stream_b + thread_id * strideElement;

    // a for read 
    // b for write 
    double *a; //= d_stream_a + thread_id * strideElement;
    double *b; // = d_stream_b + thread_id * strideElement;
    uint64_t output=0;
    uint64_t counter=pause;
    register uint64_t compilerEnemy=0;
    
    while (1) {
        // initialize a and b pointers...
        a = aConst;
        b = bConst;

        // start workload generator 
        asm volatile ( "{\n\t"
            ".reg .pred p;\n\t"
            ".reg .u64 c, r, s;\n\t"
            ".reg .u64 n;\n\t"
            "mov.u64 c, 1600;\n\t"
            "start_begin:\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_2:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_2;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_4:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_4;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_6:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_6;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_8:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_8;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_10:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_10;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_12:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_12;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_14:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_14;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // pause
            "mov.u64 %4,%6;\n\t"
            "noploop_16:"
            "setp.ne.u64 p, %4, 0;\n\t"
            "@p add.u64 %5, %4, %5;\n\t"
            "@p sub.u64 %4, %4, 1;\n\t"
            "@p bra.uni noploop_16;\n\t"
            // end pause
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            "st.global.u64 [%1], r;\n\t"
            "add.u64 %1, %1, %2;\n\t"
            // "st.global.u64 [%1], r;\n\t"
            // "add.u64 %1, %1, %2;\n\t"
            "add.u64 c, c, 1600;\n\t"
            "setp.lt.u64 p, c, %2;\n\t"
            "@p bra.uni start_begin;\n\t"
            "}"
            :  "+l"(a), "+l"(b), "+l"(strideByte), "+l"(output), "+l"(pause), "+l"(compilerEnemy), "+l"(counter)
            : 
            : 
        );

        // check termination condition
        if (threadIdx.x==0) {
            if (endFlag==1) {
                endFlagShared=1;
                return;
            }
        }
        __syncthreads();
        if (endFlagShared==1) {
            d_stream_a[thread_id] = output + pause + compilerEnemy;
            return;
        }
    }
}


void setKernelFunction(uint64_t rd_percentage) {
    // Assigning the right asm function based on the RD ratio
    switch(rd_percentage)
    {
        case 0:
            STREAM_copy_rw = &STREAM_copy_0;
            break;
        case 2:
            STREAM_copy_rw = &STREAM_copy_2;
            break;
        case 4:
            STREAM_copy_rw = &STREAM_copy_4;
            break;
        case 6:
            STREAM_copy_rw = &STREAM_copy_6;
            break;
        case 8:
            STREAM_copy_rw = &STREAM_copy_8;
            break;
        case 10:
            STREAM_copy_rw = &STREAM_copy_10;
            break;
        case 12:
            STREAM_copy_rw = &STREAM_copy_12;
            break;
        case 14:
            STREAM_copy_rw = &STREAM_copy_14;
            break;
        case 16:
            STREAM_copy_rw = &STREAM_copy_16;
            break;
        case 18:
            STREAM_copy_rw = &STREAM_copy_18;
            break;
        case 20:
            STREAM_copy_rw = &STREAM_copy_20;
            break;
        case 22:
            STREAM_copy_rw = &STREAM_copy_22;
            break;
        case 24:
            STREAM_copy_rw = &STREAM_copy_24;
            break;
        case 26:
            STREAM_copy_rw = &STREAM_copy_26;
            break;
        case 28:
            STREAM_copy_rw = &STREAM_copy_28;
            break;
        case 30:
            STREAM_copy_rw = &STREAM_copy_30;
            break;
        case 32:
            STREAM_copy_rw = &STREAM_copy_32;
            break;
        case 34:
            STREAM_copy_rw = &STREAM_copy_34;
            break;
        case 36:
            STREAM_copy_rw = &STREAM_copy_36;
            break;
        case 38:
            STREAM_copy_rw = &STREAM_copy_38;
            break;
        case 40:
            STREAM_copy_rw = &STREAM_copy_40;
            break;
        case 42:
            STREAM_copy_rw = &STREAM_copy_42;
            break;
        case 44:
            STREAM_copy_rw = &STREAM_copy_44;
            break;
        case 46:
            STREAM_copy_rw = &STREAM_copy_46;
            break;
        case 48:
            STREAM_copy_rw = &STREAM_copy_48;
            break;
        case 50:
            STREAM_copy_rw = &STREAM_copy_50;
            break;
        case 52:
            STREAM_copy_rw = &STREAM_copy_52;
            break;
        case 54:
            STREAM_copy_rw = &STREAM_copy_54;
            break;
        case 56:
            STREAM_copy_rw = &STREAM_copy_56;
            break;
        case 58:
            STREAM_copy_rw = &STREAM_copy_58;
            break;
        case 60:
            STREAM_copy_rw = &STREAM_copy_60;
            break;
        case 62:
            STREAM_copy_rw = &STREAM_copy_62;
            break;
        case 64:
            STREAM_copy_rw = &STREAM_copy_64;
            break;
        case 66:
            STREAM_copy_rw = &STREAM_copy_66;
            break;
        case 68:
            STREAM_copy_rw = &STREAM_copy_68;
            break;
        case 70:
            STREAM_copy_rw = &STREAM_copy_70;
            break;
        case 72:
            STREAM_copy_rw = &STREAM_copy_72;
            break;
        case 74:
            STREAM_copy_rw = &STREAM_copy_74;
            break;
        case 76:
            STREAM_copy_rw = &STREAM_copy_76;
            break;
        case 78:
            STREAM_copy_rw = &STREAM_copy_78;
            break;
        case 80:
            STREAM_copy_rw = &STREAM_copy_80;
            break;
        case 82:
            STREAM_copy_rw = &STREAM_copy_82;
            break;
        case 84:
            STREAM_copy_rw = &STREAM_copy_84;
            break;
        case 86:
            STREAM_copy_rw = &STREAM_copy_86;
            break;
        case 88:
            STREAM_copy_rw = &STREAM_copy_88;
            break;
        case 90:
            STREAM_copy_rw = &STREAM_copy_90;
            break;
        case 92:
            STREAM_copy_rw = &STREAM_copy_92;
            break;
        case 94:
            STREAM_copy_rw = &STREAM_copy_94;
            break;
        case 96:
            STREAM_copy_rw = &STREAM_copy_96;
            break;
        case 98:
            STREAM_copy_rw = &STREAM_copy_98;
            break;
        case 100:
            STREAM_copy_rw = &STREAM_copy_100;
            break;
        default:
            STREAM_copy_rw = &STREAM_copy_50;
            break;
    }
}

#endif // GPU_KERNELS_CUH
